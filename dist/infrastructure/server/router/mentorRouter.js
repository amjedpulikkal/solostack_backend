"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const express_1 = require("express");
const injection_1 = require("./injections/injection");
const auth_1 = require("../middlewares/auth");
const multer_1 = require("../middlewares/multer");
const router = (0, express_1.Router)();
router.post("/register", (req, res, next) => { injection_1.mentorCtrl.createMentorAccount(req, res, next); });
router.post("/verify", (req, res, next) => { injection_1.mentorCtrl.verifyStudentAccount(req, res, next); });
router.post("/login", (req, res, next) => { injection_1.mentorCtrl.login(req, res, next); });
router.post("/", (req, res, next) => { injection_1.mentorCtrl.getMentorProfile(req, res, next); });
router.post("/update-available-time", auth_1.isAuthenticated, (req, res, next) => { injection_1.mentorCtrl.updateAvailableTime(req, res, next); });
router.post("/get-available-time", auth_1.isAuthenticated, (req, res, next) => { injection_1.mentorCtrl.getAvailableTime(req, res, next); });
router.post("/get-all-available-time", auth_1.isAuthenticated, (req, res, next) => { injection_1.mentorCtrl.getAllAvailableTime(req, res, next); });
router.post("/get-all-mentors", auth_1.isAuthenticated, (req, res, next) => { injection_1.mentorCtrl.getAllMentors(req, res, next); });
router.put("/update-image", auth_1.isAuthenticated, multer_1.uploadFileToBuffer, (req, res, next) => { injection_1.mentorCtrl.updateMentorProfilePhoto(req, res, next); });
router.put("/student/storeRequest", auth_1.isAuthenticated, (req, res, next) => { injection_1.mentorCtrl.storeRequest(req, res, next); });
router.get("/searchMentor", (req, res, next) => injection_1.mentorCtrl.searchMentor(req, res, next));
router.post("/student/acceptRequest", auth_1.isAuthenticated, (req, res, next) => injection_1.mentorCtrl.acceptRequest(req, res, next));
exports.default = router;
